// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/custom_list.dart';
import 'models/hymn.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 6152171362614126554),
      name: 'Hymn',
      lastPropertyId: const obx_int.IdUid(7, 2529228940023512190),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6392779621062948517),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2684930785412225706),
            name: 'number',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6530707286563025393),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 778282351349043898),
            name: 'group',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4236559991891113105),
            name: 'subgroup',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1747738280409512655),
            name: 'text',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2529228940023512190),
            name: 'isFavorite',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 800589818453151630),
      name: 'CustomList',
      lastPropertyId: const obx_int.IdUid(3, 1633246616272441895),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5750706197855997235),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5288934644981854549),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1633246616272441895),
            name: 'createdAt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(1, 3822870303656169706),
            name: 'hymns',
            targetId: const obx_int.IdUid(1, 6152171362614126554))
      ],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 800589818453151630),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(1, 3822870303656169706),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Hymn: obx_int.EntityDefinition<Hymn>(
        model: _entities[0],
        toOneRelations: (Hymn object) => [],
        toManyRelations: (Hymn object) => {},
        getId: (Hymn object) => object.id,
        setId: (Hymn object, int id) {
          object.id = id;
        },
        objectToFB: (Hymn object, fb.Builder fbb) {
          final numberOffset =
              object.number == null ? null : fbb.writeString(object.number!);
          final titleOffset =
              object.title == null ? null : fbb.writeString(object.title!);
          final groupOffset =
              object.group == null ? null : fbb.writeString(object.group!);
          final subgroupOffset = object.subgroup == null
              ? null
              : fbb.writeString(object.subgroup!);
          final textOffset = object.text == null
              ? null
              : fbb.writeList(
                  object.text!.map(fbb.writeString).toList(growable: false));
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, numberOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, groupOffset);
          fbb.addOffset(4, subgroupOffset);
          fbb.addOffset(5, textOffset);
          fbb.addBool(6, object.isFavorite);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final numberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final groupParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final subgroupParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 12);
          final textParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 14);
          final isFavoriteParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 16);
          final object = Hymn(
              numberParam, titleParam, groupParam, subgroupParam, textParam,
              isFavorite: isFavoriteParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    CustomList: obx_int.EntityDefinition<CustomList>(
        model: _entities[1],
        toOneRelations: (CustomList object) => [],
        toManyRelations: (CustomList object) =>
            {obx_int.RelInfo<CustomList>.toMany(1, object.id): object.hymns},
        getId: (CustomList object) => object.id,
        setId: (CustomList object, int id) {
          object.id = id;
        },
        objectToFB: (CustomList object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.createdAt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final createdAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = CustomList()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..name = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..createdAt = createdAtValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(createdAtValue);
          obx_int.InternalToManyAccess.setRelInfo<CustomList>(object.hymns,
              store, obx_int.RelInfo<CustomList>.toMany(1, object.id));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Hymn] entity fields to define ObjectBox queries.
class Hymn_ {
  /// See [Hymn.id].
  static final id = obx.QueryIntegerProperty<Hymn>(_entities[0].properties[0]);

  /// See [Hymn.number].
  static final number =
      obx.QueryStringProperty<Hymn>(_entities[0].properties[1]);

  /// See [Hymn.title].
  static final title =
      obx.QueryStringProperty<Hymn>(_entities[0].properties[2]);

  /// See [Hymn.group].
  static final group =
      obx.QueryStringProperty<Hymn>(_entities[0].properties[3]);

  /// See [Hymn.subgroup].
  static final subgroup =
      obx.QueryStringProperty<Hymn>(_entities[0].properties[4]);

  /// See [Hymn.text].
  static final text =
      obx.QueryStringVectorProperty<Hymn>(_entities[0].properties[5]);

  /// See [Hymn.isFavorite].
  static final isFavorite =
      obx.QueryBooleanProperty<Hymn>(_entities[0].properties[6]);
}

/// [CustomList] entity fields to define ObjectBox queries.
class CustomList_ {
  /// See [CustomList.id].
  static final id =
      obx.QueryIntegerProperty<CustomList>(_entities[1].properties[0]);

  /// See [CustomList.name].
  static final name =
      obx.QueryStringProperty<CustomList>(_entities[1].properties[1]);

  /// See [CustomList.createdAt].
  static final createdAt =
      obx.QueryDateProperty<CustomList>(_entities[1].properties[2]);

  /// see [CustomList.hymns]
  static final hymns =
      obx.QueryRelationToMany<CustomList, Hymn>(_entities[1].relations[0]);
}
